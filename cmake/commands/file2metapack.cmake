function(sourcemeta_file2metapack_gzip)
  cmake_parse_arguments(SOURCEMETA_FILE2METAPACK "" "INPUT;OUTPUT" "" ${ARGN})
  if(NOT SOURCEMETA_FILE2METAPACK_INPUT)
    message(FATAL_ERROR "You must pass the INPUT option to ${CMAKE_CURRENT_FUNCTION}")
  endif()
  if(NOT SOURCEMETA_FILE2METAPACK_OUTPUT)
    message(FATAL_ERROR "You must pass the OUTPUT option to ${CMAKE_CURRENT_FUNCTION}")
  endif()

  # Determine MIME type based on file extension
  get_filename_component(file_extension "${SOURCEMETA_FILE2METAPACK_INPUT}" EXT)
  string(TOLOWER "${file_extension}" file_extension)
  if(file_extension STREQUAL ".png")
    set(MIME "image/png")
  elseif(file_extension STREQUAL ".svg")
    set(MIME "image/svg+xml")
  elseif(file_extension STREQUAL ".min.css")
    set(MIME "text/css")
  elseif(file_extension STREQUAL ".js")
    set(MIME "text/javascript")
  elseif(file_extension STREQUAL ".min.js")
    set(MIME "text/javascript")
  elseif(file_extension STREQUAL ".ico")
    set(MIME "image/vnd.microsoft.icon")
  elseif(file_extension STREQUAL ".webmanifest")
    set(MIME "application/manifest+json")
  elseif(file_extension STREQUAL ".woff")
    set(MIME "font/woff")
  elseif(file_extension STREQUAL ".woff2")
    set(MIME "font/woff2")
  elseif(file_extension STREQUAL ".yaml")
    set(MIME "application/yaml")
  elseif(file_extension STREQUAL ".json")
    set(MIME "application/json")
  elseif(file_extension STREQUAL ".html")
    set(MIME "text/html")
  else()
    message(FATAL_ERROR "Cannot determine MIME type for ${file_extension}")
  endif()

  add_custom_command(OUTPUT "${SOURCEMETA_FILE2METAPACK_OUTPUT}"
    COMMAND "$<TARGET_FILE:sourcemeta_registry_file2metapack>" --gzip
      "${SOURCEMETA_FILE2METAPACK_INPUT}" "${MIME}" "${SOURCEMETA_FILE2METAPACK_OUTPUT}"
    DEPENDS "${SOURCEMETA_FILE2METAPACK_INPUT}" "$<TARGET_FILE:sourcemeta_registry_file2metapack>")
endfunction()

{
  "target": "../../schemas/uri-reference.json",
  "x-license": "LicenseRef-Sourcemeta-Commercial",
  "tests": [
    {
      "description": "Invalid type - number",
      "valid": false,
      "data": 123
    },
    {
      "description": "Invalid type - boolean",
      "valid": false,
      "data": true
    },
    {
      "description": "Invalid type - null",
      "valid": false,
      "data": null
    },
    {
      "description": "Invalid type - array",
      "valid": false,
      "data": []
    },
    {
      "description": "Invalid type - object",
      "valid": false,
      "data": {}
    },
    {
      "description": "Empty string is valid URI reference",
      "valid": true,
      "data": ""
    },
    {
      "description": "Basic HTTP URI",
      "valid": true,
      "data": "http://example.com"
    },
    {
      "description": "HTTPS URI with path",
      "valid": true,
      "data": "https://example.com/path/to/resource"
    },
    {
      "description": "FTP URI",
      "valid": true,
      "data": "ftp://ftp.example.com/file.txt"
    },
    {
      "description": "File URI",
      "valid": true,
      "data": "file:///path/to/file"
    },
    {
      "description": "Mailto URI",
      "valid": true,
      "data": "mailto:user@example.com"
    },
    {
      "description": "Tel URI",
      "valid": true,
      "data": "tel:+1-800-555-0123"
    },
    {
      "description": "URN with ISBN",
      "valid": true,
      "data": "urn:isbn:0451450523"
    },
    {
      "description": "URN with UUID",
      "valid": true,
      "data": "urn:uuid:12345678-1234-5678-1234-123456789abc"
    },
    {
      "description": "Custom scheme",
      "valid": true,
      "data": "custom://example.com/resource"
    },
    {
      "description": "Scheme with numbers",
      "valid": true,
      "data": "h2tp://example.com"
    },
    {
      "description": "Scheme with plus",
      "valid": true,
      "data": "git+ssh://user@host/repo.git"
    },
    {
      "description": "Scheme with period",
      "valid": true,
      "data": "x.400://example.com"
    },
    {
      "description": "Scheme with hyphen",
      "valid": true,
      "data": "my-scheme://example.com"
    },
    {
      "description": "URI with userinfo",
      "valid": true,
      "data": "https://user:password@example.com/path"
    },
    {
      "description": "URI with userinfo without password",
      "valid": true,
      "data": "https://user@example.com/path"
    },
    {
      "description": "URI with empty userinfo",
      "valid": true,
      "data": "https://@example.com/path"
    },
    {
      "description": "URI with IPv4 address",
      "valid": true,
      "data": "http://192.168.1.1/path"
    },
    {
      "description": "URI with IPv6 address",
      "valid": true,
      "data": "http://[2001:db8::1]/path"
    },
    {
      "description": "URI with IPv6 and port",
      "valid": true,
      "data": "http://[::1]:8080/path"
    },
    {
      "description": "URI with port number",
      "valid": true,
      "data": "https://example.com:443/path"
    },
    {
      "description": "URI with high port number",
      "valid": true,
      "data": "http://example.com:65535/path"
    },
    {
      "description": "URI with international domain name",
      "valid": true,
      "data": "http://xn--nxasmq6b.example.com/path"
    },
    {
      "description": "URI with empty path",
      "valid": true,
      "data": "http://example.com"
    },
    {
      "description": "URI with root path",
      "valid": true,
      "data": "http://example.com/"
    },
    {
      "description": "URI with complex path",
      "valid": true,
      "data": "http://example.com/path/to/resource.html"
    },
    {
      "description": "URI with path containing dot segments",
      "valid": true,
      "data": "http://example.com/path/../other/./file"
    },
    {
      "description": "URI with percent-encoded path",
      "valid": true,
      "data": "http://example.com/path%20with%20spaces"
    },
    {
      "description": "URI with unreserved characters in path",
      "valid": true,
      "data": "http://example.com/ABCabc123-._~"
    },
    {
      "description": "URI with sub-delims in path",
      "valid": true,
      "data": "http://example.com/!$&'()*+,;="
    },
    {
      "description": "URI with simple query",
      "valid": true,
      "data": "http://example.com/path?query=value"
    },
    {
      "description": "URI with multiple query parameters",
      "valid": true,
      "data": "http://example.com/path?a=1&b=2&c=3"
    },
    {
      "description": "URI with empty query",
      "valid": true,
      "data": "http://example.com/path?"
    },
    {
      "description": "URI with query containing special characters",
      "valid": true,
      "data": "http://example.com/path?q=hello%20world&x=a+b"
    },
    {
      "description": "URI with query containing question marks",
      "valid": true,
      "data": "http://example.com/path?q=what?is?this"
    },
    {
      "description": "URI with fragment",
      "valid": true,
      "data": "http://example.com/path#section"
    },
    {
      "description": "URI with empty fragment",
      "valid": true,
      "data": "http://example.com/path#"
    },
    {
      "description": "URI with query and fragment",
      "valid": true,
      "data": "http://example.com/path?q=v#section"
    },
    {
      "description": "URI with percent-encoded fragment",
      "valid": true,
      "data": "http://example.com/path#section%201"
    },
    {
      "description": "URI with fragment containing hash",
      "valid": true,
      "data": "http://example.com/path#hash#in#fragment"
    },
    {
      "description": "Single slash path",
      "valid": true,
      "data": "/"
    },
    {
      "description": "Path with single segment",
      "valid": true,
      "data": "file.txt"
    },
    {
      "description": "Path with multiple segments",
      "valid": true,
      "data": "path/to/resource"
    },
    {
      "description": "Absolute path",
      "valid": true,
      "data": "/absolute/path/to/file"
    },
    {
      "description": "Current directory reference",
      "valid": true,
      "data": "."
    },
    {
      "description": "Parent directory reference",
      "valid": true,
      "data": ".."
    },
    {
      "description": "Path with dot segments",
      "valid": true,
      "data": "../../../relative/path"
    },
    {
      "description": "Network path reference",
      "valid": true,
      "data": "//example.com/path"
    },
    {
      "description": "Network path with userinfo",
      "valid": true,
      "data": "//user:pass@example.com/path"
    },
    {
      "description": "Network path with port",
      "valid": true,
      "data": "//example.com:8080/path"
    },
    {
      "description": "Query only",
      "valid": true,
      "data": "?query=value"
    },
    {
      "description": "Fragment only",
      "valid": true,
      "data": "#fragment"
    },
    {
      "description": "Path with query",
      "valid": true,
      "data": "path/to/file?query=value"
    },
    {
      "description": "Path with fragment",
      "valid": true,
      "data": "path/to/file#section"
    },
    {
      "description": "Path with query and fragment",
      "valid": true,
      "data": "path/to/file?query=value#section"
    },
    {
      "description": "Relative path that looks like scheme starting with number",
      "valid": true,
      "data": "9scheme"
    },
    {
      "description": "Relative path that looks like scheme starting with hyphen",
      "valid": true,
      "data": "-scheme"
    },
    {
      "description": "Relative path that looks like scheme starting with period",
      "valid": true,
      "data": ".scheme"
    },
    {
      "description": "Relative path with invalid scheme character",
      "valid": true,
      "data": "sch@me"
    },
    {
      "description": "Opaque URI (scheme:path)",
      "valid": true,
      "data": "mailto:user@example.com"
    },
    {
      "description": "Opaque URI with query",
      "valid": true,
      "data": "mailto:user@example.com?subject=test"
    },
    {
      "description": "Scheme with colon only",
      "valid": true,
      "data": "scheme:"
    },
    {
      "description": "URI with all components",
      "valid": true,
      "data": "https://user:pass@example.com:8080/path/to/resource?query=value&other=123#section"
    },
    {
      "description": "Data URI",
      "valid": true,
      "data": "data:text/plain;base64,SGVsbG8gV29ybGQ="
    },
    {
      "description": "Data URI with percent encoding",
      "valid": true,
      "data": "data:text/plain,Hello%20World"
    },
    {
      "description": "Invalid IPv4 address",
      "valid": false,
      "data": "http://256.256.256.256/path"
    },
    {
      "description": "IPv6 without brackets",
      "valid": false,
      "data": "http://2001:db8::1/path"
    },
    {
      "description": "Authority with space",
      "valid": false,
      "data": "http://exa mple.com/path"
    },
    {
      "description": "Invalid percent encoding - single digit",
      "valid": false,
      "data": "http://example.com/path%2"
    },
    {
      "description": "Invalid percent encoding - non-hex",
      "valid": false,
      "data": "http://example.com/path%ZZ"
    },
    {
      "description": "Percent sign without encoding",
      "valid": false,
      "data": "http://example.com/path%/file"
    },
    {
      "description": "URI with unencoded space",
      "valid": false,
      "data": "http://example.com/path with space"
    },
    {
      "description": "URI with newline",
      "valid": false,
      "data": "http://example.com/path\nwith\nnewline"
    },
    {
      "description": "URI with tab character",
      "valid": false,
      "data": "http://example.com/path\twith\ttab"
    },
    {
      "description": "URI with carriage return",
      "valid": false,
      "data": "http://example.com/path\rwith\rreturn"
    },
    {
      "description": "URI with null character",
      "valid": false,
      "data": "http://example.com/path\u0000with\u0000null"
    },
    {
      "description": "URI with control character",
      "valid": false,
      "data": "http://example.com/path\u0001control"
    },
    {
      "description": "Single character scheme",
      "valid": true,
      "data": "x://example.com"
    },
    {
      "description": "Long scheme name",
      "valid": true,
      "data": "verylongschemenamethatisallowed://example.com"
    },
    {
      "description": "URI with only authority",
      "valid": true,
      "data": "//example.com"
    },
    {
      "description": "Relative path with colon not at start",
      "valid": true,
      "data": "file:name"
    },
    {
      "description": "Path with consecutive slashes",
      "valid": true,
      "data": "http://example.com/path//to///resource"
    },
    {
      "description": "Path with brackets (not IPv6)",
      "valid": true,
      "data": "http://example.com/path[with]brackets"
    },
    {
      "description": "Query with equals but no value",
      "valid": true,
      "data": "http://example.com/path?key="
    },
    {
      "description": "Query with ampersand but no value",
      "valid": true,
      "data": "http://example.com/path?key&other=value"
    },
    {
      "description": "Path with percent-encoded characters",
      "valid": true,
      "data": "path%20with%20spaces/file%2Ename"
    },
    {
      "description": "Network path with IPv4",
      "valid": true,
      "data": "//192.168.1.1/path"
    },
    {
      "description": "Network path with IPv6",
      "valid": true,
      "data": "//[2001:db8::1]/path"
    },
    {
      "description": "Query and fragment without path",
      "valid": true,
      "data": "?query#fragment"
    },
    {
      "description": "Path with colon (valid in relative path)",
      "valid": true,
      "data": "path:with:colons"
    },
    {
      "description": "Path starting with colon",
      "valid": true,
      "data": ":path"
    },
    {
      "description": "Path with unreserved characters",
      "valid": true,
      "data": "ABCabc123-._~"
    },
    {
      "description": "Path with sub-delims",
      "valid": true,
      "data": "!$&'()*+,;="
    },
    {
      "description": "Path with at sign",
      "valid": true,
      "data": "path@file"
    },
    {
      "description": "Query with various characters",
      "valid": true,
      "data": "?query=a+b&c=d%20e"
    },
    {
      "description": "Fragment with various characters",
      "valid": true,
      "data": "#fragment%20with%20spaces"
    },
    {
      "description": "Complex relative path",
      "valid": true,
      "data": "./this:that/other.html"
    },
    {
      "description": "Path segment with colon not at start",
      "valid": true,
      "data": "g:x"
    },
    {
      "description": "Path with brackets",
      "valid": true,
      "data": "path[with]brackets"
    },
    {
      "description": "Network path with reg-name containing dash",
      "valid": true,
      "data": "//sub-domain.example.com/path"
    },
    {
      "description": "Network path with reg-name containing underscore",
      "valid": true,
      "data": "//sub_domain.example.com/path"
    },
    {
      "description": "Relative path that looks like scheme but isn't",
      "valid": true,
      "data": "http"
    },
    {
      "description": "Relative path with file extension",
      "valid": true,
      "data": "document.pdf"
    },
    {
      "description": "Path with multiple consecutive slashes",
      "valid": true,
      "data": "path//to///resource"
    },
    {
      "description": "Query with question mark in value",
      "valid": true,
      "data": "?query=value?with?marks"
    },
    {
      "description": "Fragment with hash in value",
      "valid": true,
      "data": "#fragment#with#hashes"
    }
  ]
}

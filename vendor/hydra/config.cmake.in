@PACKAGE_INIT@

# Support both casing styles
list(APPEND HYDRA_COMPONENTS ${Hydra_FIND_COMPONENTS})
list(APPEND HYDRA_COMPONENTS ${hydra_FIND_COMPONENTS})
if(NOT HYDRA_COMPONENTS)
  list(APPEND HYDRA_COMPONENTS httpclient)
  list(APPEND HYDRA_COMPONENTS bucket)
endif()

include(CMakeFindDependencyMacro)

# GCC does not allow the use of std::promise, std::future
# without compiling with pthreads support.
if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
  set(CMAKE_THREAD_PREFER_PTHREAD TRUE)
  set(THREADS_PREFER_PTHREAD_FLAG TRUE)
  find_dependency(Threads)
endif()

foreach(component ${HYDRA_COMPONENTS})
  if(component STREQUAL "crypto")
    find_dependency(BearSSL)
    include("${CMAKE_CURRENT_LIST_DIR}/sourcemeta_hydra_crypto.cmake")
  elseif(component STREQUAL "httpclient")
    include("${CMAKE_CURRENT_LIST_DIR}/sourcemeta_hydra_http.cmake")
    find_dependency(BearSSL)
    find_dependency(CURL)
    include("${CMAKE_CURRENT_LIST_DIR}/sourcemeta_hydra_httpclient.cmake")
  elseif(component STREQUAL "bucket")
    include("${CMAKE_CURRENT_LIST_DIR}/sourcemeta_hydra_http.cmake")
    include("${CMAKE_CURRENT_LIST_DIR}/sourcemeta_hydra_crypto.cmake")
    find_dependency(CURL)
    include("${CMAKE_CURRENT_LIST_DIR}/sourcemeta_hydra_httpclient.cmake")
    find_dependency(Core COMPONENTS json uri)
    include("${CMAKE_CURRENT_LIST_DIR}/sourcemeta_hydra_bucket.cmake")
  else()
    message(FATAL_ERROR "Unknown Hydra component: ${component}")
  endif()
endforeach()

check_required_components("@PROJECT_NAME@")

name: Sourcemeta Registry CD

on:
  push:
    branches:
      - main
    tags:
      - "v*.*.*"

concurrency:
  group: registry-cd-${{ github.ref }}
  cancel-in-progress: false

jobs:
  docker:
    runs-on: ubuntu-latest
    permissions:
      packages: write
    strategy:
      fail-fast: false
      matrix:
        edition:
          - name: starter
            package: registry
          - name: pro
            package: registry-pro
          - name: enterprise
            package: registry-enterprise

    steps:
      - uses: actions/checkout@v4

      # See https://docs.github.com/en/actions/publishing-packages/publishing-docker-images
      - uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # For cross-architecture builds
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      # Build and push
      - uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        id: meta
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ matrix.edition.package }}
      - uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        id: push
        with:
          context: .
          file: Dockerfile
          build-args: "SOURCEMETA_REGISTRY_EDITION=${{ matrix.edition.name }}"
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  release:
    needs: docker
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - run: gh config set prompt disabled
        if: github.ref_type == 'tag'
        env:
          GH_TOKEN: ${{ github.token }}
      - run: gh release create ${{ github.ref_name }} --draft=false --title ${{ github.ref_name }} --target "$GITHUB_SHA" --generate-notes
        if: github.ref_type == 'tag'
        env:
          GH_TOKEN: ${{ github.token }}

  public:
    needs: docker
    runs-on: ubuntu-latest
    permissions:
      packages: read
      deployments: write
      contents: write
    env:
      KRAFTCLOUD_METRO: was1
      KRAFTKIT_NO_CHECK_UPDATES: true
      SERVICE_DOMAIN: schemas.sourcemeta.com
    steps:
      - uses: actions/checkout@v4
      - run: >
          docker build 
          --tag registry-public . 
          --file public/Dockerfile.base 
          --progress plain 
          --build-arg SOURCEMETA_REGISTRY=ghcr.io/sourcemeta/registry-enterprise:main

      - uses: chrnorm/deployment-action@v2
        id: deploy-github
        with:
          token: '${{ github.token }}'
          environment-url: https://${{ env.SERVICE_DOMAIN }}
          environment: production

      - id: deploy
        uses: unikraft/kraftkit@v0.11.6
        with:
          run: |
            set -o errexit
            set -o nounset
            kraft cloud service create --name schemas --domain ${{ env.SERVICE_DOMAIN }} 443:8000 || true
            kraft cloud deploy --memory 1024 --rollout remove --image schemas --service schemas \
              --kraftfile public/Kraftfile --restart on-failure --replicas 2 --env SOURCEMETA_REGISTRY_I_HAVE_A_COMMERCIAL_LICENSE=1 ./public
            kraft cloud service get schemas
            kraft cloud instance logs "$(kraft cloud service get schemas --output json | jq --raw-output '.[0].instances | split(" ") | .[0]')"
            curl --location --fail https://${{ env.SERVICE_DOMAIN }}
        env:
          KRAFTCLOUD_TOKEN: ${{ secrets.KRAFTCLOUD_TOKEN }}

      # Update deployment status
      - if: ${{ steps.deploy.outcome == 'success' }}
        uses: chrnorm/deployment-status@v2
        with:
          token: '${{ github.token }}'
          environment-url: '${{ steps.deploy-github.outputs.environment_url }}'
          deployment-id: '${{ steps.deploy-github.outputs.deployment_id }}'
          state: 'success'
      - if: ${{ steps.deploy.outcome != 'success' }}
        uses: chrnorm/deployment-status@v2
        with:
          token: '${{ github.token }}'
          environment-url: '${{ steps.deploy-github.outputs.environment_url }}'
          deployment-id: '${{ steps.deploy-github.outputs.deployment_id }}'
          state: 'failure'
